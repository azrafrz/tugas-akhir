# -*- coding: utf-8 -*-
"""trainyolosikecil8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fQmogeDCVtnRmXnOaanjlddsAFM5nCac
"""

from google.colab import drive
import os

# Mount Google Drive
drive.mount('/content/drive')

# Buat folder untuk menyimpan semua hasil training
save_dir = "/content/drive/MyDrive/modelyoloke8"
os.makedirs(save_dir, exist_ok=True)

# Install Ultralytics dan Roboflow
!pip install ultralytics roboflow

from ultralytics import YOLO
import torch
import shutil
from roboflow import Roboflow
import glob
import cv2
import matplotlib.pyplot as plt
from IPython.display import Image, display

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="xnbJx6aDZ6cZ202kwZbU")
project = rf.workspace("autonomous-car-tjprn").project("datasetyolo-4")
version = project.version(1)
dataset = version.download("yolov8")

data_yaml = f"{dataset.location}/data.yaml"
print(f"Dataset path: {data_yaml}")

from ultralytics import YOLO
model = YOLO("yolov8n.pt")  # Bisa diganti yolov8s.pt, dsb

results = model.train(
    data=data_yaml,               # Path dataset dari Roboflow
    epochs=100,                   # Jumlah epoch
    batch=16,                     # Sesuaikan dengan RAM GPU
    imgsz=640,                    # Resolusi gambar
    patience=10,                  # Early stopping jika 10 epoch tidak ada peningkatan
    optimizer='Adam',             # Optimizer
    save_period=10,                # Simpan model setiap epoch
    lr0=0.01,                     # Learning rate awal
    lrf=0.1,                      # Faktor pengurangan learning rate
    momentum=0.937,               # Momentum
    save=True,
    project=save_dir,             # Simpan hasil di Google Drive
    name="modelyolo"
)

val_results = model.val(
    data=data_yaml,
    project=save_dir,
    name="val_result"
)

print(f"[Validation] mAP50-95: {val_results.box.map:.4f}")
print(f"[Validation] mAP50: {val_results.box.map50:.4f}")
print(f"[Validation] Precision: {val_results.box.mp:.4f}")
print(f"[Validation] Recall: {val_results.box.mr:.4f}")
f1_score_val = 2 * (val_results.box.mp * val_results.box.mr) / (val_results.box.mp + val_results.box.mr + 1e-6)
print(f"[Validation] F1 Score: {f1_score_val:.4f}")

# Perkiraan "Classification Accuracy"
# Ini adalah rata-rata precision untuk setiap kelas
accuracy_val = val_results.box.mp
print(f"[Validation] Classification Accuracy (Average Precision): {accuracy_val:.4f}")

# 8. Evaluasi dengan data test (menampilkan confusion matrix + semua metrik)
test_results = model.val(
    data=data_yaml,
    split='test',  # evaluasi pada test set
    save_json=True,
    project=save_dir,
    name="test_eval"
)

# 9. Tampilkan metrik evaluasi dari YOLO
print(f"\nüîé EVALUASI TEST SET")
print(f"mAP50-95 : {test_results.box.map:.4f}")
print(f"mAP50     : {test_results.box.map50:.4f}")
print(f"mAP75     : {test_results.box.map75:.4f}")
print(f"Precision : {test_results.box.mp:.4f}")
print(f"Recall    : {test_results.box.mr:.4f}")
f1_score = 2 * (test_results.box.mp * test_results.box.mr) / (test_results.box.mp + test_results.box.mr + 1e-6)
print(f"F1 Score  : {f1_score:.4f}")

# 10. Uji inference time pada test images
import glob
import time

test_images = glob.glob(f"{dataset.location}/test/images/*.jpg")[:10]
start_time = time.time()
model.predict(source=test_images, save=False, conf=0.25)
end_time = time.time()

avg_inference_time = (end_time - start_time) / len(test_images)
avg_inference_time_ms = avg_inference_time * 1000
print(f"\n‚è±Ô∏è Rata-rata Waktu Inference per Gambar: {avg_inference_time_ms:.2f} ms")

from IPython.display import Image, display
display(Image(filename=f"{save_dir}/test_eval/confusion_matrix.png"))

# Simpan dalam format ONNX
model.export(format="onnx", dynamic=True, simplify=True)

# Simpan dalam format TorchScript
model.export(format="torchscript")

# Simpan model terbaik dalam format .pt
shutil.copy(f"{save_dir}/modelyolo/weights/best.pt", f"{save_dir}/final_model_yolov8.pt")

import pandas as pd
import matplotlib.pyplot as plt

# Cek path hasil training
log_path = f"{save_dir}/modelyolo/results.csv"
print(f"Log training path: {log_path}")

# Load log training dari file results.csv
train_log = pd.read_csv(log_path)

# Plot training loss dan mAP
plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.plot(train_log["epoch"], train_log["train/cls_loss"], label="Classification Loss")
plt.plot(train_log["epoch"], train_log["train/box_loss"], label="Box Loss")
plt.title("Training Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()
plt.grid()

plt.subplot(1, 2, 2)
plt.plot(train_log["epoch"], train_log["metrics/mAP50(B)"], label="mAP@0.5")
plt.plot(train_log["epoch"], train_log["metrics/mAP50-95(B)"], label="mAP@0.5:0.95")
plt.title("Validation mAP")
plt.xlabel("Epoch")
plt.ylabel("mAP")
plt.legend()
plt.grid()

plt.tight_layout()
plt.show()

from tabulate import tabulate

# Ambil nilai dari hasil val di test set sebelumnya
precision = test_results.box.mp
recall = test_results.box.mr
map50 = test_results.box.map50
map95 = test_results.box.map
f1 = 2 * (precision * recall) / (precision + recall + 1e-6)

metrics_table = [
    ["Precision", f"{precision:.4f}"],
    ["Recall", f"{recall:.4f}"],
    ["F1 Score", f"{f1:.4f}"],
    ["mAP@0.5", f"{map50:.4f}"],
    ["mAP@0.5:0.95", f"{map95:.4f}"]
]

print(tabulate(metrics_table, headers=["Metric", "Value"], tablefmt="fancy_grid"))

from IPython.display import Image, display

conf_matrix_path = f"{save_dir}/test_eval/confusion_matrix.png"
display(Image(filename=conf_matrix_path))

print(f"\n‚è±Ô∏è Rata-rata Waktu Inference per Gambar: {avg_inference_time_ms:.2f} ms")